1. Allowing each exception/interrupt to have its own handler allows for the handlers to accept variable inputs. In particular, some interrupts generate error codes and others do not; to keep a consistent Trapframe structure, it is useful to indicate which case we are in by varying interrupts. We can also specify custom privledge levels for exception handlers (though this is not used in JOS).

2. I did not have to change anything to make softint behave correctly. Users should not be able to explicitly call the kernel's page fault handler, because the IDT specifies that this handler can only be called directly by the kernel (dpl=0). Allowing the user to invoke this handler gives the user a higher level of privledge than is intended, presenting security concerns.

3. This depends on the dpl setting in the call to SETGATE. As T_BRKPT is intended to be callable from user mode to explicitly pass control to the kernel monitor, it should have dpl=3 so the the kernel exception general protection settings do not redirect the call to a General Protection Fault. dpl=0, restricting the exception to be called from only kernel-level code, would cause this incorrect triggering.

4. The point of these mechinisms is to enforce the security guarentee of separation between user-mode and kernel-mode code. Specifically, the user should not be able to arbitrarily execute code in the kernel; user/softint attempts to do so by explicitly raising a Pagefault expression. The dpl setting enforces this security guarentee on a per-execption granularity to allow for specific behavior between the exceptions.
